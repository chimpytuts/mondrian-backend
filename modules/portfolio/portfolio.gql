extend type Query {
    portfolioGetUserPortfolio: GqlUserPortfolioData!
    portfolioGetUserPortfolioHistory: [GqlUserPortfolioData!]!
    portfolioGetUserPortfolioHistoryAdmin: [GqlUserPortfolioData!]!
}

extend type Mutation {
    cachePortfolioHistoryForDate(date: String!): Boolean!
    clearCacheAtBlock(block: Int!): Boolean!
    clearCachedPools: Boolean!
    clearCachedPortfolioHistories: Boolean!
    refreshLatestBlockCachedKey: Boolean!
}

type GqlUserPortfolioData {
    timestamp: Int!
    totalValue: GqlBigNumber!
    totalSwapFees: GqlBigNumber!
    totalSwapVolume: GqlBigNumber!
    myFees: GqlBigNumber!
    tokens: [GqlUserTokenData!]!
    pools: [GqlUserPoolData!]!
    xembr: [GqlUserXembrData!]!
}

type GqlUserXembrData {
  id: String!
  totalRewardValue: GqlBigNumber!
  xembrBalance: GqlBigNumber!
  shares: GqlBigNumber!
  percentShare: GqlBigNumber
  questMultiplier: Float!
  timeMultiplier: Float!
  rewardTokens:  [GqlUserRewardTokenData!]!
}

type GqlUserRewardTokenData {
  id: String!
  address: String!
  symbol: String!
  name: String!
  claimed: GqlBigNumber!
  pending: GqlBigNumber!
  totalValue: GqlBigNumber!
}

type GqlUserPoolData {
    id: String!
    poolId: String!
    poolAddress: String!
    name: String!
    shares: GqlBigNumber!
    percentShare: Float!
    totalValue: GqlBigNumber!
    pricePerShare: GqlBigNumber!
    tokens: [GqlUserTokenData!]!
    swapFees: GqlBigNumber!
    swapVolume: GqlBigNumber!
    myFees: GqlBigNumber!
    percentOfPortfolio: Float!
    priceChange: GqlBigNumber!
    priceChangePercent: Float!
}

type GqlUserTokenData {
    id: String!
    address: String!
    symbol: String!
    name: String!
    balance: GqlBigNumber!
    pricePerToken: GqlBigNumber!
    totalValue: GqlBigNumber!
    percentOfPortfolio: Float!
}
